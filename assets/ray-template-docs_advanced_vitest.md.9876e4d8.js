import{_ as s,o as a,c as e,V as l}from"./chunks/framework.51f721ee.js";const o="/ray-template-doc/assets/vitest_threads_error.83a2703e.png",u=JSON.parse('{"title":"单元测试","description":"","frontmatter":{},"headers":[],"relativePath":"ray-template-docs/advanced/vitest.md","filePath":"ray-template-docs/advanced/vitest.md","lastUpdated":1711251901000}'),n={name:"ray-template-docs/advanced/vitest.md"},t=l(`<h1 id="单元测试" tabindex="-1">单元测试 <a class="header-anchor" href="#单元测试" aria-label="Permalink to &quot;单元测试&quot;">​</a></h1><p>在 <code>Ray Template v4.7.2</code> 版本中引入了 <code>vitest</code> 测试框架，用于对模板进行单元测试。</p><p>并且默认对 <code>utils</code>, <code>hooks</code> 包下的方法进行了单元测试模块编写。</p><h2 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h2><p><code>vitest</code> 是一个基于 <code>vite</code> 的测试框架，有以下的特点：</p><ul><li>高性能</li><li>易配置</li><li>兼容 <code>jest</code></li><li><code>plugin</code> 支持</li><li>默认支持：<code>ts(x)</code>, <code>js(x)</code></li><li>还有更多...</li></ul><blockquote><p>还有更多特点，可以点击查看 <a href="https://cn.vitest.dev/guide/why.html" target="_blank" rel="noreferrer">vitest 官网</a>。</p></blockquote><h2 id="配置流程" tabindex="-1">配置流程 <a class="header-anchor" href="#配置流程" aria-label="Permalink to &quot;配置流程&quot;">​</a></h2><p>在 Ray Template 中，我们已经内置了 <code>vitest</code>，所以你可以直接使用。只需要按照一下步骤即可起步：</p><ol><li>在根目录找到 <code>__test__</code> 文件2.</li><li>创建对应的单元模块测试文件</li><li>编写对应测试应用</li><li>运行测试</li></ol><h2 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h2><p>假设目录结构如下：</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">.</span></span>
<span class="line"><span style="color:#FFCB6B;">├──</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">__test__</span></span>
<span class="line"><span style="color:#FFCB6B;">│</span><span style="color:#BABED8;">   </span><span style="color:#C3E88D;">├──</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">sum.spec.ts</span></span>
<span class="line"><span style="color:#FFCB6B;">└──</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">src</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#FFCB6B;">├──</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">sum.ts</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>在 <code>__test__</code> 目录下创建 <code>sum.spec.ts</code> 文件，编写测试用例。并且在 <code>src</code> 目录下创建 <code>sum.ts</code> 文件，编写对应的函数。</p></div><h3 id="sum-ts" tabindex="-1">sum.ts <a class="header-anchor" href="#sum-ts" aria-label="Permalink to &quot;sum.ts&quot;">​</a></h3><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">sum</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">a</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">b</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">a</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">b</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="sum-spec-ts" tabindex="-1">sum.spec.ts <a class="header-anchor" href="#sum-spec-ts" aria-label="Permalink to &quot;sum.spec.ts&quot;">​</a></h3><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">sum</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">../../src/sum</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">describe</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">sum</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">it</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">should return 3</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">expect</span><span style="color:#F07178;">(</span><span style="color:#82AAFF;">sum</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#F07178;">))</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toBe</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">3</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span></code></pre></div><h3 id="运行测试" tabindex="-1">运行测试 <a class="header-anchor" href="#运行测试" aria-label="Permalink to &quot;运行测试&quot;">​</a></h3><p>在模板中默认集成了 <code>vitest/ui</code> 插件，所以你有两种方式查看测试结果：</p><ol><li>在终端中运行 <code>pnpm test</code>，查看测试结果</li></ol><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">pnpm</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">test</span></span></code></pre></div><ol start="2"><li>在终端中运行 <code>pnpm test:ui</code>，查看测试结果</li></ol><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">pnpm</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">test:ui</span></span></code></pre></div><h2 id="一些注意事项" tabindex="-1">一些注意事项 <a class="header-anchor" href="#一些注意事项" aria-label="Permalink to &quot;一些注意事项&quot;">​</a></h2><h3 id="关于-threads-配置" tabindex="-1">关于 <code>threads</code> 配置 <a class="header-anchor" href="#关于-threads-配置" aria-label="Permalink to &quot;关于 \`threads\` 配置&quot;">​</a></h3><p>为什么会出现 <code>threads</code> 配置问题？</p><p>因为在实际开发过程中遇到了如下的一些问题：</p><p><img src="`+o+'" alt=""></p><p>去查阅了相关的一些资料，发现这个问题也是历史悠久就有，这么做也是迫不得已。有兴趣可以点击查看相关的 <a href="https://github.com/vitest-dev/vitest/issues/740" target="_blank" rel="noreferrer">issues</a>。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>其实这个问题蛮难受的，会导致单元测试运行时间变长。</p></div><h3 id="单元测试模块后缀名" tabindex="-1">单元测试模块后缀名 <a class="header-anchor" href="#单元测试模块后缀名" aria-label="Permalink to &quot;单元测试模块后缀名&quot;">​</a></h3><p>模板默认只查询 <code>__test__/**/*.(spec).(ts|js)</code> 文件。并且不会查询 <code>__test__/utils</code> 文件下的所有文件。</p><h3 id="规范问题" tabindex="-1">规范问题 <a class="header-anchor" href="#规范问题" aria-label="Permalink to &quot;规范问题&quot;">​</a></h3><p>一般来说，我们应该按照模块去划分对应的测试文件，这样更加清晰。所以，这边也建议这么做。</p><h3 id="其他问题" tabindex="-1">其他问题 <a class="header-anchor" href="#其他问题" aria-label="Permalink to &quot;其他问题&quot;">​</a></h3><p>点击查看 <a href="https://cn.vitest.dev/guide/common-errors.html" target="_blank" rel="noreferrer">vitest 常见错误</a> 文章，这里不做赘述。</p>',37),p=[t];function c(r,i,d,y,F,h){return a(),e("div",null,p)}const m=s(n,[["render",c]]);export{u as __pageData,m as default};
