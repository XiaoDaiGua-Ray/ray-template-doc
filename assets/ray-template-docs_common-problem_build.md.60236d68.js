import{_ as e,o,c as a,V as t}from"./chunks/framework.51f721ee.js";const u=JSON.parse('{"title":"构建","description":"","frontmatter":{},"headers":[],"relativePath":"ray-template-docs/common-problem/build.md","filePath":"ray-template-docs/common-problem/build.md","lastUpdated":1711251901000}'),c={name:"ray-template-docs/common-problem/build.md"},d=t('<h1 id="构建" tabindex="-1">构建 <a class="header-anchor" href="#构建" aria-label="Permalink to &quot;构建&quot;">​</a></h1><h2 id="构建体积过大" tabindex="-1">构建体积过大 <a class="header-anchor" href="#构建体积过大" aria-label="Permalink to &quot;构建体积过大&quot;">​</a></h2><p>当你出现构建体积过大的时候，你应该注意包的拆分与代码的抽离。模板预设了包拆分，所以一般不会出现该问题。并且默认启用了 <code>gzip</code> 压缩，所以可以让后端同学服务端支持 <code>gzip</code>。</p><h2 id="构建失败" tabindex="-1">构建失败 <a class="header-anchor" href="#构建失败" aria-label="Permalink to &quot;构建失败&quot;">​</a></h2><p>默认启用构建严格模式，也就是说会启用严格的 <code>eslint</code> <code>ts</code> 检查。并且在提交代码之前，也会默认的执行该检查。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>如果在构建项目时，出现了 <code>vue</code> <code>vueuse</code> 等方法的类型错误时候，不用紧张，优先去解决其余的错误。因为 <code>eslint</code> <code>ts</code> 检查器的优先级最高，所以会直接中断代码的执行，也就意味着 <code>auto-import</code> 插件的自动类型生成文件被中断了，导致了自动导入方法的类型错误提示。</p></div>',6),s=[d];function r(l,i,n,p,m,_){return o(),a("div",null,s)}const b=e(c,[["render",r]]);export{u as __pageData,b as default};
