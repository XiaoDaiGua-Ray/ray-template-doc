import{_ as s,c as i,o as a,a3 as t}from"./chunks/framework.CtA4ZjMf.js";const E=JSON.parse('{"title":"useSpinning","description":"","frontmatter":{},"headers":[],"relativePath":"docs/hooks/template/useSpinning.md","filePath":"docs/hooks/template/useSpinning.md","lastUpdated":1715926864000}'),n={name:"docs/hooks/template/useSpinning.md"},e=t(`<h1 id="usespinning" tabindex="-1">useSpinning <a class="header-anchor" href="#usespinning" aria-label="Permalink to &quot;useSpinning&quot;">​</a></h1><p>让内容区域，转圈圈。</p><h2 id="返回值" tabindex="-1">返回值 <a class="header-anchor" href="#返回值" aria-label="Permalink to &quot;返回值&quot;">​</a></h2><table><thead><tr><th>名称</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>reload</td><td><code>(wait?: number) =&gt; void</code></td><td>显示加载状态，并且重新刷新当前路由加载，默认 800ms</td></tr><tr><td>openSpin</td><td><code>() =&gt; void</code></td><td>让内容区域处于加载状态，需要手动取消，并且不会重新刷新当前路由</td></tr><tr><td>closeSpin</td><td><code>() =&gt; void</code></td><td>关闭内容区域加载状态</td></tr></tbody></table><h2 id="基础使用" tabindex="-1">基础使用 <a class="header-anchor" href="#基础使用" aria-label="Permalink to &quot;基础使用&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { useSpinning } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@/hooks&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">reload</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">openSpin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">closeSpin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useSpinning</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reload</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 显示加载状态，并且重新刷新当前路由加载，默认 800ms</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">openSpin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 让内容区域处于加载状态，需要手动取消，并且不会重新刷新当前路由</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">closeSpin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 关闭内容区域加载状态</span></span></code></pre></div>`,6),h=[e];function p(l,d,k,o,r,c){return a(),i("div",null,h)}const u=s(n,[["render",p]]);export{E as __pageData,u as default};
