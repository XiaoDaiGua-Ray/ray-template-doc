import{_ as s,c as a,o as i,a3 as e}from"./chunks/framework.CtA4ZjMf.js";const g=JSON.parse('{"title":"国际化","description":"","frontmatter":{},"headers":[],"relativePath":"ray-template-docs/dev/i18n.md","filePath":"ray-template-docs/dev/i18n.md","lastUpdated":1715849193000}'),l={name:"ray-template-docs/dev/i18n.md"},t=e(`<h1 id="国际化" tabindex="-1">国际化 <a class="header-anchor" href="#国际化" aria-label="Permalink to &quot;国际化&quot;">​</a></h1><blockquote><p>项目使用 <code>vue-i18n</code> 作为国际化插件。开箱即用的构建优化处理，让你在构建国际化语言包时，最大程度的减少体积。</p></blockquote><h2 id="i18n-ally-插件" tabindex="-1">i18n-ally 插件 <a class="header-anchor" href="#i18n-ally-插件" aria-label="Permalink to &quot;i18n-ally 插件&quot;">​</a></h2><p>安装该插件后，会自动的扫描项目的语言包，并且在现实的时候查看对应的语言。并且还可以直接点击跳转到对应的语言路径位置。具体安装方法，这里不做赘述。</p><h2 id="配置默认语言" tabindex="-1">配置默认语言 <a class="header-anchor" href="#配置默认语言" aria-label="Permalink to &quot;配置默认语言&quot;">​</a></h2><p>配置 <code>SYSTEM_DEFAULT_LOCAL</code> 即可。</p><h2 id="获取系统当前语言" tabindex="-1">获取系统当前语言 <a class="header-anchor" href="#获取系统当前语言" aria-label="Permalink to &quot;获取系统当前语言&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { getAppDefaultLanguage } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@/locales/utils&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getAppDefaultLanguage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><h2 id="语言切换" tabindex="-1">语言切换 <a class="header-anchor" href="#语言切换" aria-label="Permalink to &quot;语言切换&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 导入方法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { useI18n } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@/locales/useI18n&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 解构获取修改语言方法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">locale</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useI18n</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 修改语言</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">locale</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key)</span></span></code></pre></div><h2 id="语言新增" tabindex="-1">语言新增 <a class="header-anchor" href="#语言新增" aria-label="Permalink to &quot;语言新增&quot;">​</a></h2><blockquote><p>假设添加繁体（<code>zh-TW</code>）</p></blockquote><div class="tip custom-block"><p class="custom-block-title">步骤</p><ul><li><code>src/locales/lang</code> 文件下创建对应新语言包文件夹与语言文件 <ul><li><code>zh-TW</code> 文件夹</li><li><code>zh-TW.ts</code> 文件</li></ul></li><li>创建与原有语言格式一样的文件夹（可以直接 cv 过去）</li><li>配置语言下拉项（<code>LOCAL_OPTIONS</code>）</li><li>配置 dayjs 国际化映射（<code>DAYJS_LOCAL_MAP</code>）</li></ul></div><p>经过上面的步骤，就已经完成一个新的语言包添加。请注意的是，建议采用国际主流的语言命名方式。</p>`,14),n=[t];function h(p,o,d,c,k,r){return i(),a("div",null,n)}const y=s(l,[["render",h]]);export{g as __pageData,y as default};
