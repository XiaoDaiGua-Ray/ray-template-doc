import{_ as e,c as a,o as t,a3 as o}from"./chunks/framework.CtA4ZjMf.js";const u=JSON.parse('{"title":"eslint","description":"","frontmatter":{},"headers":[],"relativePath":"ray-template-docs/advanced/eslint.md","filePath":"ray-template-docs/advanced/eslint.md","lastUpdated":1715926864000}'),c={name:"ray-template-docs/advanced/eslint.md"},s=o('<h1 id="eslint" tabindex="-1">eslint <a class="header-anchor" href="#eslint" aria-label="Permalink to &quot;eslint&quot;">​</a></h1><p>在多人协同开发项目的时候，一个统一的强制约束、统一的开发规范是很有必要的。所以项目默认是启用强 <code>eslint</code> 代码校验，哪怕是警告也会导致项目构建失败。</p><div class="warning custom-block"><p class="custom-block-title">注意</p><p>在项目构建的过程中，可能会由于项目的 <code>eslint</code> 错误，从而导致构建失败。并且在你点开文件时，有一堆自动导入 <code>api</code> 类型提示错误，这个时候你不需要去关注这个，只需要去解决 <code>eslint</code> 提示错误即可。在最新的版本中，自动导入 <code>api</code> 提示问题已经解决。</p></div><h2 id="自定义风格" tabindex="-1">自定义风格 <a class="header-anchor" href="#自定义风格" aria-label="Permalink to &quot;自定义风格&quot;">​</a></h2><p>可以在 <code>.eslintrc.cjs</code> 文件中，自定义 <code>rules</code>，创建一个符合自己开发风格的规则。</p><h2 id="关闭代码检查" tabindex="-1">关闭代码检查 <a class="header-anchor" href="#关闭代码检查" aria-label="Permalink to &quot;关闭代码检查&quot;">​</a></h2><p>配置 <code>.eslintignore</code> 忽略全部检查即可关闭 <code>eslint</code> 的代码检查功能。</p><div class="danger custom-block"><p class="custom-block-title">建议</p><p>强烈建议不要关闭代码检查功能，特别是多人开发的过程中，因为你永远不知道你的队友会写什么神奇的代码。</p></div>',8),d=[s];function l(i,n,r,p,_,h){return t(),a("div",null,d)}const f=e(c,[["render",l]]);export{u as __pageData,f as default};
